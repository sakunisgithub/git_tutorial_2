{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
	 	"prefix": "c boilerplate code",
	 	"body": [
	 		"#include<stdio.h>",
			"#include<stdlib.h>\n",
	 		"int main()",
			"{",
			"\t${0:/*code*/}",
			"\treturn 0;",
			"}"
	 	],
	 	"description": "This is our boilerplate code for running C programmes"
		
	},

	"Snippet 2": {
		"prefix": "f1",
		"body": ["${1:return_type} ${2:function_name}(${3:argument_data_type});"],
		"description": "This the snippet for function prototype for functions of single argument" 
	},

	"Snippet 3": {
		"prefix": "f2",
		"body": ["${1:return_type} ${2:function_name}(${3:argument_data_type}, ${4:argument_data_type});"],
		"description": "This the snippet for function prototype for functions of double arguments" 
	},

	"Snippet 4": {
		"prefix": "f3",
		"body": ["${1:return_type} ${2:function_name}(${3:argument_data_type}, ${4:argument_data_type}, ${5:argument_data_type});"],
		"description": "This the snippet for function prototype for functions of three arguments" 
	},

	"Snippet 5": {
		"prefix": "fun1",
		"body": [
			"${1:return_type} ${2:function_name}(${3:argument_data_type})",
			"{",
			"\t${0:/*code*/}",
			"}"
	],
		"description": "This the snippet for function definition for functions of single argument" 
	},

	"Snippet 6": {
		"prefix": "fun2",
		"body": [
			"${1:return_type} ${2:function_name}(${3:argument_data_type}, ${4:argument_data_type})",
			"{",
			"\t${0:/*code*/}",
			"}"
	],
		"description": "This the snippet for function definition for functions of double arguments" 
	},

	"Snippet 7": {
		"prefix": "fun3",
		"body": [
			"${1:return_type} ${2:function_name}(${3:argument_data_type}, ${4:argument_data_type}, ${5:argument_data_type})",
			"{",
			"\t${0:/*code*/}",
			"}"
	],
		"description": "This the snippet for function definition for functions of three arguments" 
	},

	"malloc" : {
		"prefix": "mlc",
		"body": [ "${1:pointer_type} * ${2:pointer_name} = ($1 *) malloc(sizeof($1));" ]
	},

	"structure" : {
		"prefix": "str",
		"body": [
			"struct ${1:structure_name}",
			"{",
			"\t${0:/*code*/}",
			"};"
		]
	},

	"else{}" : {
		"prefix": "elsej",
		"body": [
			"else",
			"{",
			"\t${0:/*code*/}",
			"}"
		]
	},

	"print_integer" : {
		"prefix": "prd",
		"body": [ "printf(\"%d\", ${1:variable});" ],
	},

	"printf" : {
		"prefix": "prf",
		"body": [ "printf(\"${1:text}\"${2});" ],
	},

	"scanf_integer" : {
		"prefix": "scd",
		"body": [ "scanf(\"%d\", &${1:variable});" ],
	},

}